<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/sleepeasy/ui/screens/SleepHubScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/sleepeasy/ui/screens/SleepHubScreen.kt" />
              <option name="originalContent" value="package com.example.sleepeasy.ui.screens&#10;&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.systemBarsPadding&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import com.example.sleepeasy.ui.viewmodel.SleepHubViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun SleepHubScreen(&#10;    sleepHubViewModel: SleepHubViewModel = hiltViewModel(),&#10;    navigateToSleepForm: () -&gt; Unit = { /* No-op by default */ }&#10;) {&#10;    Scaffold(&#10;        modifier = Modifier.systemBarsPadding(),&#10;        topBar = {&#10;            TopAppBar(&#10;                title = {&#10;                    Text(&quot;SimpleSleep&quot;)&#10;                }&#10;            )&#10;        },&#10;        content = { innerPadding -&gt;&#10;            Column(&#10;                modifier = Modifier.padding(innerPadding)&#10;            ) {&#10;                Text(&quot;Sleep Hub Screen&quot;)&#10;                Button(onClick = navigateToSleepForm) {&#10;                    Text(&quot;Record Sleep Data&quot;)&#10;                }&#10;                // TODO: add graph of sleep time&#10;//                val barChartData = DataUtils.getBarChartData(barChartListSize, maxRange)&#10;                BarChart(modifier = Modifier.height(350.dp), barChartData = barChartData)&#10;&#10;&#10;&#10;                // TODO: do exercise flow&#10;                // TODO: do caffeine flow&#10;                // TODO: do stress level flow&#10;            }&#10;        }&#10;    )&#10;}&#10;&#10;@Preview&#10;@Composable&#10;fun SleepHubScreenPreview() {&#10;    SleepHubScreen(&#10;        navigateToSleepForm = { /* No-op for preview */ }&#10;    )&#10;}" />
              <option name="updatedContent" value="package com.example.sleepeasy.ui.screens&#10;&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.systemBarsPadding&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import com.example.sleepeasy.ui.viewmodel.SleepHubViewModel&#10;import com.patrykandpatrick.vico.compose.chart.Chart&#10;import com.patrykandpatrick.vico.compose.chart.bar.BarChart&#10;import com.patrykandpatrick.vico.core.entry.ChartEntryModelProducer&#10;import com.patrykandpatrick.vico.core.entry.entryOf&#10;import androidx.compose.ui.graphics.Color&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun SleepHubScreen(&#10;    sleepHubViewModel: SleepHubViewModel = hiltViewModel(),&#10;    navigateToSleepForm: () -&gt; Unit = { /* No-op by default */ }&#10;) {&#10;    Scaffold(&#10;        modifier = Modifier.systemBarsPadding(),&#10;        topBar = {&#10;            TopAppBar(&#10;                title = {&#10;                    Text(&quot;SimpleSleep&quot;)&#10;                }&#10;            )&#10;        },&#10;        content = { innerPadding -&gt;&#10;            Column(&#10;                modifier = Modifier.padding(innerPadding)&#10;            ) {&#10;                Text(&quot;Sleep Hub Screen&quot;)&#10;                Button(onClick = navigateToSleepForm) {&#10;                    Text(&quot;Record Sleep Data&quot;)&#10;                }&#10;                // Vico BarChart example&#10;                val chartEntryModelProducer = remember {&#10;                    ChartEntryModelProducer(&#10;                        listOf(&#10;                            entryOf(0f, 7f), // July 25&#10;                            entryOf(1f, 6.5f), // July 26&#10;                            entryOf(2f, 8f) // July 27&#10;                        )&#10;                    )&#10;                }&#10;                Text(&quot;Hours Slept (last 3 days)&quot;, modifier = Modifier.padding(top = 16.dp, bottom = 8.dp))&#10;                Chart(&#10;                    chart = BarChart(),&#10;                    modelProducer = chartEntryModelProducer,&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .height(250.dp)&#10;                )&#10;&#10;                // TODO: do exercise flow&#10;                // TODO: do caffeine flow&#10;                // TODO: do stress level flow&#10;            }&#10;        }&#10;    )&#10;}&#10;&#10;@Preview&#10;@Composable&#10;fun SleepHubScreenPreview() {&#10;    SleepHubScreen(&#10;        navigateToSleepForm = { /* No-op for preview */ }&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/buildSrc/src/main/java/Dependecies.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/buildSrc/src/main/java/Dependecies.kt" />
              <option name="originalContent" value="object Dependecies {&#10;&#10;    val coreKtx by lazy { &quot;androidx.core:core-ktx:${Version.coreKtx}&quot; }&#10;    val lifecycleRuntimeKtx by lazy { &quot;androidx.lifecycle:lifecycle-runtime-ktx:${Version.lifecycleRuntimeKtx}&quot; }&#10;    val activityCompose by lazy { &quot;androidx.activity:activity-compose:${Version.activityCompose}&quot; }&#10;    val composeBom by lazy { &quot;androidx.compose:compose-bom:${Version.composeBom}&quot; }&#10;    val ui by lazy { &quot;androidx.compose.ui:ui&quot; }&#10;    val uiGraphics by lazy { &quot;androidx.compose.ui:ui-graphics&quot; }&#10;    val uiTooling by lazy { &quot;androidx.compose.ui:ui-tooling&quot; }&#10;    val uiToolingPreview by lazy { &quot;androidx.compose.ui:ui-tooling-preview&quot; }&#10;    val uiTestManifest by lazy { &quot;androidx.compose.ui:ui-test-manifest&quot; }&#10;    val uiTestJunit4 by lazy { &quot;androidx.compose.ui:ui-test-junit4&quot; }&#10;    val material3 by lazy { &quot;androidx.compose.material3:material3&quot; }&#10;    val junit by lazy { &quot;junit:junit:${Version.junit}&quot; }&#10;    val androidxJunit by lazy { &quot;androidx.test.ext:junit:${Version.junitVersion}&quot; }&#10;    val espressoCore by lazy { &quot;androidx.test.espresso:espresso-core:${Version.espressoCore}&quot; }&#10;    val hiltAndroid by lazy { &quot;com.google.dagger:hilt-android:${Version.hilt}&quot; }&#10;    val hiltAndroidCompiler by lazy { &quot;com.google.dagger:hilt-android-compiler:${Version.hilt}&quot; }&#10;    val hiltNavigationCompose by lazy { &quot;androidx.hilt:hilt-navigation-compose:${Version.hiltNavigationCompose}&quot; }&#10;    val serializationJson by lazy { &quot;org.jetbrains.kotlinx:kotlinx-serialization-json:${Version.serializationJson}&quot; }&#10;    val navigationCompose by lazy { &quot;androidx.navigation:navigation-compose:${Version.navigationCompose}&quot; }&#10;//    val yCharts by lazy { &quot;com.patrykandpatrick.vico:compose:${Version.yCharts}&quot; }&#10;    val yCharts by lazy { &quot;co.yml:ycharts:${Version.yCharts}&quot; }&#10;&#10;}" />
              <option name="updatedContent" value="object Dependecies {&#10;&#10;    val coreKtx by lazy { &quot;androidx.core:core-ktx:${Version.coreKtx}&quot; }&#10;    val lifecycleRuntimeKtx by lazy { &quot;androidx.lifecycle:lifecycle-runtime-ktx:${Version.lifecycleRuntimeKtx}&quot; }&#10;    val activityCompose by lazy { &quot;androidx.activity:activity-compose:${Version.activityCompose}&quot; }&#10;    val composeBom by lazy { &quot;androidx.compose:compose-bom:${Version.composeBom}&quot; }&#10;    val ui by lazy { &quot;androidx.compose.ui:ui&quot; }&#10;    val uiGraphics by lazy { &quot;androidx.compose.ui:ui-graphics&quot; }&#10;    val uiTooling by lazy { &quot;androidx.compose.ui:ui-tooling&quot; }&#10;    val uiToolingPreview by lazy { &quot;androidx.compose.ui:ui-tooling-preview&quot; }&#10;    val uiTestManifest by lazy { &quot;androidx.compose.ui:ui-test-manifest&quot; }&#10;    val uiTestJunit4 by lazy { &quot;androidx.compose.ui:ui-test-junit4&quot; }&#10;    val material3 by lazy { &quot;androidx.compose.material3:material3&quot; }&#10;    val junit by lazy { &quot;junit:junit:${Version.junit}&quot; }&#10;    val androidxJunit by lazy { &quot;androidx.test.ext:junit:${Version.junitVersion}&quot; }&#10;    val espressoCore by lazy { &quot;androidx.test.espresso:espresso-core:${Version.espressoCore}&quot; }&#10;    val hiltAndroid by lazy { &quot;com.google.dagger:hilt-android:${Version.hilt}&quot; }&#10;    val hiltAndroidCompiler by lazy { &quot;com.google.dagger:hilt-android-compiler:${Version.hilt}&quot; }&#10;    val hiltNavigationCompose by lazy { &quot;androidx.hilt:hilt-navigation-compose:${Version.hiltNavigationCompose}&quot; }&#10;    val serializationJson by lazy { &quot;org.jetbrains.kotlinx:kotlinx-serialization-json:${Version.serializationJson}&quot; }&#10;    val navigationCompose by lazy { &quot;androidx.navigation:navigation-compose:${Version.navigationCompose}&quot; }&#10;//    val yCharts by lazy { &quot;com.patrykandpatrick.vico:compose:${Version.yCharts}&quot; }&#10;    val yCharts by lazy { &quot;co.yml:ycharts:${Version.yCharts}&quot; }&#10;    val vicoCompose by lazy { &quot;com.patrykandpatrick.vico:compose:${Version.vico}&quot; }&#10;    val vicoCore by lazy { &quot;com.patrykandpatrick.vico:core:${Version.vico}&quot; }&#10;    val vicoViews by lazy { &quot;com.patrykandpatrick.vico:views:${Version.vico}&quot; }&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/buildSrc/src/main/java/Version.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/buildSrc/src/main/java/Version.kt" />
              <option name="originalContent" value="object Version {&#10;&#10;    const val coreKtx = &quot;1.12.0&quot;&#10;    const val lifecycleRuntimeKtx = &quot;2.8.7&quot;&#10;    const val activityCompose = &quot;1.10.1&quot;&#10;    const val composeBom = &quot;2024.04.01&quot;&#10;    const val junit = &quot;4.13.2&quot;&#10;    const val junitVersion = &quot;1.2.1&quot;&#10;    const val espressoCore = &quot;3.6.1&quot;&#10;    const val hilt = &quot;2.51.1&quot;&#10;    const val hiltNavigationCompose = &quot;1.2.0&quot;&#10;    const val serializationJson = &quot;1.6.3&quot;&#10;    const val navigationCompose = &quot;2.9.2&quot;&#10;//    const val yCharts = &quot;2.0.0&quot;&#10;    const val yCharts = &quot;2.1.0&quot;&#10;}" />
              <option name="updatedContent" value="object Version {&#10;&#10;    const val coreKtx = &quot;1.12.0&quot;&#10;    const val lifecycleRuntimeKtx = &quot;2.8.7&quot;&#10;    const val activityCompose = &quot;1.10.1&quot;&#10;    const val composeBom = &quot;2024.04.01&quot;&#10;    const val junit = &quot;4.13.2&quot;&#10;    const val junitVersion = &quot;1.2.1&quot;&#10;    const val espressoCore = &quot;3.6.1&quot;&#10;    const val hilt = &quot;2.51.1&quot;&#10;    const val hiltNavigationCompose = &quot;1.2.0&quot;&#10;    const val serializationJson = &quot;1.6.3&quot;&#10;    const val navigationCompose = &quot;2.9.2&quot;&#10;//    const val yCharts = &quot;2.0.0&quot;&#10;    const val yCharts = &quot;2.1.0&quot;&#10;    const val vico = &quot;1.13.0&quot;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>