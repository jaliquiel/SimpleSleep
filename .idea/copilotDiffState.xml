<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;    alias(libs.plugins.hilt.android)&#10;    id(&quot;org.jetbrains.kotlin.kapt&quot;)&#10;    id(&quot;org.jetbrains.kotlin.plugin.serialization&quot;) version libs.versions.kotlin.get() // Add serialization plugin&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.example.sleepeasy&quot;&#10;    compileSdk = 35&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.example.sleepeasy&quot;&#10;        minSdk = 24&#10;        targetSdk = 35&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_17&#10;        targetCompatibility = JavaVersion.VERSION_17&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;17&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(Dependecies.coreKtx)&#10;    implementation(Dependecies.lifecycleRuntimeKtx)&#10;    implementation(Dependecies.activityCompose)&#10;    implementation(platform(Dependecies.composeBom))&#10;    implementation(Dependecies.ui)&#10;    implementation(Dependecies.uiGraphics)&#10;    implementation(Dependecies.uiToolingPreview)&#10;    implementation(Dependecies.material3)&#10;    implementation(Dependecies.hiltAndroid)&#10;    implementation(Dependecies.hiltNavigationCompose)&#10;    implementation(Dependecies.navigationCompose)&#10;    implementation(Dependecies.vicoCompose)&#10;    implementation(Dependecies.vicoCore)&#10;    implementation(Dependecies.vicoViews)&#10;    kapt(Dependecies.hiltAndroidCompiler)&#10;    testImplementation(Dependecies.junit)&#10;    androidTestImplementation(Dependecies.androidxJunit)&#10;    androidTestImplementation(Dependecies.espressoCore)&#10;    androidTestImplementation(platform(Dependecies.composeBom))&#10;    androidTestImplementation(Dependecies.uiTestJunit4)&#10;    debugImplementation(Dependecies.uiTooling)&#10;    debugImplementation(Dependecies.uiTestManifest)&#10;    implementation(Dependecies.serializationJson)&#10;}&#10;&#10;kapt {&#10;    correctErrorTypes = true&#10;}&#10;" />
              <option name="updatedContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;    alias(libs.plugins.hilt.android)&#10;    id(&quot;org.jetbrains.kotlin.kapt&quot;)&#10;    id(&quot;org.jetbrains.kotlin.plugin.serialization&quot;) version libs.versions.kotlin.get() // Add serialization plugin&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.example.sleepeasy&quot;&#10;    compileSdk = 35&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.example.sleepeasy&quot;&#10;        minSdk = 24&#10;        targetSdk = 35&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_17&#10;        targetCompatibility = JavaVersion.VERSION_17&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;17&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(Dependecies.coreKtx)&#10;    implementation(Dependecies.lifecycleRuntimeKtx)&#10;    implementation(Dependecies.activityCompose)&#10;    implementation(platform(Dependecies.composeBom))&#10;    implementation(Dependecies.ui)&#10;    implementation(Dependecies.uiGraphics)&#10;    implementation(Dependecies.uiToolingPreview)&#10;    implementation(Dependecies.material3)&#10;    implementation(Dependecies.hiltAndroid)&#10;    implementation(Dependecies.hiltNavigationCompose)&#10;    implementation(Dependecies.navigationCompose)&#10;    implementation(Dependecies.vicoCompose)&#10;    implementation(Dependecies.vicoCore)&#10;    implementation(Dependecies.vicoViews)&#10;    kapt(Dependecies.hiltAndroidCompiler)&#10;    testImplementation(Dependecies.junit)&#10;    androidTestImplementation(Dependecies.androidxJunit)&#10;    androidTestImplementation(Dependecies.espressoCore)&#10;    androidTestImplementation(platform(Dependecies.composeBom))&#10;    androidTestImplementation(Dependecies.uiTestJunit4)&#10;    debugImplementation(Dependecies.uiTooling)&#10;    debugImplementation(Dependecies.uiTestManifest)&#10;    implementation(Dependecies.serializationJson)&#10;}&#10;&#10;kapt {&#10;    correctErrorTypes = true&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/sleepeasy/ui/screens/SleepHubScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/sleepeasy/ui/screens/SleepHubScreen.kt" />
              <option name="originalContent" value="package com.example.sleepeasy.ui.screens&#10;&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.systemBarsPadding&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import com.example.sleepeasy.ui.viewmodel.SleepHubViewModel&#10;import com.patrykandpatrick.vico.compose.cartesian.CartesianChartHost&#10;import com.patrykandpatrick.vico.compose.cartesian.axis.rememberBottom&#10;import com.patrykandpatrick.vico.compose.cartesian.axis.rememberStart&#10;import com.patrykandpatrick.vico.compose.cartesian.layer.rememberColumnCartesianLayer&#10;import com.patrykandpatrick.vico.compose.cartesian.rememberCartesianChart&#10;import com.patrykandpatrick.vico.core.cartesian.axis.HorizontalAxis&#10;import com.patrykandpatrick.vico.core.cartesian.axis.VerticalAxis&#10;import com.patrykandpatrick.vico.core.cartesian.data.CartesianChartModelProducer&#10;import com.patrykandpatrick.vico.core.cartesian.data.columnSeries&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun SleepHubScreen(&#10;    sleepHubViewModel: SleepHubViewModel = hiltViewModel(),&#10;    navigateToSleepForm: () -&gt; Unit = { /* No-op by default */ }&#10;) {&#10;    Scaffold(&#10;        modifier = Modifier.systemBarsPadding(),&#10;        topBar = {&#10;            TopAppBar(&#10;                title = {&#10;                    Text(&quot;SimpleSleep&quot;)&#10;                }&#10;            )&#10;        },&#10;        content = { innerPadding -&gt;&#10;            Column(&#10;                modifier = Modifier.padding(innerPadding)&#10;            ) {&#10;                Text(&quot;Sleep Hub Screen&quot;)&#10;                Button(onClick = navigateToSleepForm) {&#10;                    Text(&quot;Record Sleep Data&quot;)&#10;                }&#10;                // TODO: add graph of sleep time&#10;&#10;                val modelProducer = remember { CartesianChartModelProducer() }&#10;                LaunchedEffect(Unit) {&#10;                    modelProducer.runTransaction {&#10;                        columnSeries {&#10;//                            series(5, 6, 5, 2, 11, 8, 5, 2, 15, 11, 8, 13, 12, 10, 2, 7)&#10;                            series(&#10;                                x = listOf(1, 2, 3, 4, 5, 6, 7),&#10;                                y = listOf(5, 6, 5, 2, 11, 8, 5)&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;                CartesianChartHost(&#10;                    rememberCartesianChart(&#10;                        rememberColumnCartesianLayer(),&#10;                        startAxis = VerticalAxis.rememberStart(),&#10;                        bottomAxis = HorizontalAxis.rememberBottom(),&#10;                    ),&#10;                    modelProducer,&#10;                )&#10;&#10;                // TODO: do exercise flow&#10;                // TODO: do caffeine flow&#10;                // TODO: do stress level flow&#10;            }&#10;        }&#10;    )&#10;}&#10;&#10;@Preview&#10;@Composable&#10;fun SleepHubScreenPreview() {&#10;    SleepHubScreen(&#10;        navigateToSleepForm = { /* No-op for preview */ }&#10;    )&#10;}" />
              <option name="updatedContent" value="package com.example.sleepeasy.ui.screens&#10;&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.systemBarsPadding&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import com.example.sleepeasy.ui.viewmodel.SleepHubViewModel&#10;import com.patrykandpatrick.vico.compose.cartesian.CartesianChartHost&#10;import com.patrykandpatrick.vico.compose.cartesian.axis.rememberBottom&#10;import com.patrykandpatrick.vico.compose.cartesian.axis.rememberStart&#10;import com.patrykandpatrick.vico.compose.cartesian.layer.rememberColumnCartesianLayer&#10;import com.patrykandpatrick.vico.compose.cartesian.rememberCartesianChart&#10;import com.patrykandpatrick.vico.core.cartesian.axis.HorizontalAxis&#10;import com.patrykandpatrick.vico.core.cartesian.axis.VerticalAxis&#10;import com.patrykandpatrick.vico.core.cartesian.data.CartesianChartModelProducer&#10;import com.patrykandpatrick.vico.core.cartesian.data.columnSeries&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun SleepHubScreen(&#10;    sleepHubViewModel: SleepHubViewModel = hiltViewModel(),&#10;    navigateToSleepForm: () -&gt; Unit = { /* No-op by default */ }&#10;) {&#10;    Scaffold(&#10;        modifier = Modifier.systemBarsPadding(),&#10;        topBar = {&#10;            TopAppBar(&#10;                title = {&#10;                    Text(&quot;SimpleSleep&quot;)&#10;                }&#10;            )&#10;        },&#10;        content = { innerPadding -&gt;&#10;            Column(&#10;                modifier = Modifier.padding(innerPadding)&#10;            ) {&#10;                Text(&quot;Sleep Hub Screen&quot;)&#10;                Button(onClick = navigateToSleepForm) {&#10;                    Text(&quot;Record Sleep Data&quot;)&#10;                }&#10;                // TODO: add graph of sleep time&#10;&#10;                val modelProducer = remember { CartesianChartModelProducer() }&#10;                LaunchedEffect(Unit) {&#10;                    modelProducer.runTransaction {&#10;                        columnSeries {&#10;//                            series(5, 6, 5, 2, 11, 8, 5, 2, 15, 11, 8, 13, 12, 10, 2, 7)&#10;                            series(&#10;                                x = listOf(1, 2, 3, 4, 5, 6, 7),&#10;                                y = listOf(5, 6, 5, 2, 11, 8, 5)&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;                CartesianChartHost(&#10;                    rememberCartesianChart(&#10;                        rememberColumnCartesianLayer(),&#10;                        startAxis = VerticalAxis.rememberStart(),&#10;                        bottomAxis = HorizontalAxis.rememberBottom(&#10;                            valueFormatter = { value, _ -&gt;&#10;                                val dayLabels = listOf(&quot;Mon&quot;, &quot;Tue&quot;, &quot;Wed&quot;, &quot;Thu&quot;, &quot;Fri&quot;, &quot;Sat&quot;, &quot;Sun&quot;)&#10;                                dayLabels.getOrNull(value.toInt() - 1) ?: value.toInt().toString()&#10;                            }&#10;                        ),&#10;                    ),&#10;                    modelProducer,&#10;                )&#10;&#10;                // TODO: do exercise flow&#10;                // TODO: do caffeine flow&#10;                // TODO: do stress level flow&#10;            }&#10;        }&#10;    )&#10;}&#10;&#10;@Preview&#10;@Composable&#10;fun SleepHubScreenPreview() {&#10;    SleepHubScreen(&#10;        navigateToSleepForm = { /* No-op for preview */ }&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/buildSrc/src/main/java/Dependecies.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/buildSrc/src/main/java/Dependecies.kt" />
              <option name="originalContent" value="object Dependecies {&#10;&#10;    val coreKtx by lazy { &quot;androidx.core:core-ktx:${Version.coreKtx}&quot; }&#10;    val lifecycleRuntimeKtx by lazy { &quot;androidx.lifecycle:lifecycle-runtime-ktx:${Version.lifecycleRuntimeKtx}&quot; }&#10;    val activityCompose by lazy { &quot;androidx.activity:activity-compose:${Version.activityCompose}&quot; }&#10;    val composeBom by lazy { &quot;androidx.compose:compose-bom:${Version.composeBom}&quot; }&#10;    val ui by lazy { &quot;androidx.compose.ui:ui&quot; }&#10;    val uiGraphics by lazy { &quot;androidx.compose.ui:ui-graphics&quot; }&#10;    val uiTooling by lazy { &quot;androidx.compose.ui:ui-tooling&quot; }&#10;    val uiToolingPreview by lazy { &quot;androidx.compose.ui:ui-tooling-preview&quot; }&#10;    val uiTestManifest by lazy { &quot;androidx.compose.ui:ui-test-manifest&quot; }&#10;    val uiTestJunit4 by lazy { &quot;androidx.compose.ui:ui-test-junit4&quot; }&#10;    val material3 by lazy { &quot;androidx.compose.material3:material3&quot; }&#10;    val junit by lazy { &quot;junit:junit:${Version.junit}&quot; }&#10;    val androidxJunit by lazy { &quot;androidx.test.ext:junit:${Version.junitVersion}&quot; }&#10;    val espressoCore by lazy { &quot;androidx.test.espresso:espresso-core:${Version.espressoCore}&quot; }&#10;    val hiltAndroid by lazy { &quot;com.google.dagger:hilt-android:${Version.hilt}&quot; }&#10;    val hiltAndroidCompiler by lazy { &quot;com.google.dagger:hilt-android-compiler:${Version.hilt}&quot; }&#10;    val hiltNavigationCompose by lazy { &quot;androidx.hilt:hilt-navigation-compose:${Version.hiltNavigationCompose}&quot; }&#10;    val serializationJson by lazy { &quot;org.jetbrains.kotlinx:kotlinx-serialization-json:${Version.serializationJson}&quot; }&#10;    val navigationCompose by lazy { &quot;androidx.navigation:navigation-compose:${Version.navigationCompose}&quot; }&#10;//    val yCharts by lazy { &quot;com.patrykandpatrick.vico:compose:${Version.yCharts}&quot; }&#10;    val yCharts by lazy { &quot;co.yml:ycharts:${Version.yCharts}&quot; }&#10;&#10;}" />
              <option name="updatedContent" value="object Dependecies {&#10;&#10;    val coreKtx by lazy { &quot;androidx.core:core-ktx:${Version.coreKtx}&quot; }&#10;    val lifecycleRuntimeKtx by lazy { &quot;androidx.lifecycle:lifecycle-runtime-ktx:${Version.lifecycleRuntimeKtx}&quot; }&#10;    val activityCompose by lazy { &quot;androidx.activity:activity-compose:${Version.activityCompose}&quot; }&#10;    val composeBom by lazy { &quot;androidx.compose:compose-bom:${Version.composeBom}&quot; }&#10;    val ui by lazy { &quot;androidx.compose.ui:ui&quot; }&#10;    val uiGraphics by lazy { &quot;androidx.compose.ui:ui-graphics&quot; }&#10;    val uiTooling by lazy { &quot;androidx.compose.ui:ui-tooling&quot; }&#10;    val uiToolingPreview by lazy { &quot;androidx.compose.ui:ui-tooling-preview&quot; }&#10;    val uiTestManifest by lazy { &quot;androidx.compose.ui:ui-test-manifest&quot; }&#10;    val uiTestJunit4 by lazy { &quot;androidx.compose.ui:ui-test-junit4&quot; }&#10;    val material3 by lazy { &quot;androidx.compose.material3:material3&quot; }&#10;    val junit by lazy { &quot;junit:junit:${Version.junit}&quot; }&#10;    val androidxJunit by lazy { &quot;androidx.test.ext:junit:${Version.junitVersion}&quot; }&#10;    val espressoCore by lazy { &quot;androidx.test.espresso:espresso-core:${Version.espressoCore}&quot; }&#10;    val hiltAndroid by lazy { &quot;com.google.dagger:hilt-android:${Version.hilt}&quot; }&#10;    val hiltAndroidCompiler by lazy { &quot;com.google.dagger:hilt-android-compiler:${Version.hilt}&quot; }&#10;    val hiltNavigationCompose by lazy { &quot;androidx.hilt:hilt-navigation-compose:${Version.hiltNavigationCompose}&quot; }&#10;    val serializationJson by lazy { &quot;org.jetbrains.kotlinx:kotlinx-serialization-json:${Version.serializationJson}&quot; }&#10;    val navigationCompose by lazy { &quot;androidx.navigation:navigation-compose:${Version.navigationCompose}&quot; }&#10;//    val yCharts by lazy { &quot;com.patrykandpatrick.vico:compose:${Version.yCharts}&quot; }&#10;    val yCharts by lazy { &quot;co.yml:ycharts:${Version.yCharts}&quot; }&#10;    val vicoCompose by lazy { &quot;com.patrykandpatrick.vico:compose:${Version.vico}&quot; }&#10;    val vicoCore by lazy { &quot;com.patrykandpatrick.vico:core:${Version.vico}&quot; }&#10;    val vicoViews by lazy { &quot;com.patrykandpatrick.vico:views:${Version.vico}&quot; }&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/buildSrc/src/main/java/Version.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/buildSrc/src/main/java/Version.kt" />
              <option name="originalContent" value="object Version {&#10;&#10;    const val coreKtx = &quot;1.12.0&quot;&#10;    const val lifecycleRuntimeKtx = &quot;2.8.7&quot;&#10;    const val activityCompose = &quot;1.10.1&quot;&#10;    const val composeBom = &quot;2024.04.01&quot;&#10;    const val junit = &quot;4.13.2&quot;&#10;    const val junitVersion = &quot;1.2.1&quot;&#10;    const val espressoCore = &quot;3.6.1&quot;&#10;    const val hilt = &quot;2.51.1&quot;&#10;    const val hiltNavigationCompose = &quot;1.2.0&quot;&#10;    const val serializationJson = &quot;1.6.3&quot;&#10;    const val navigationCompose = &quot;2.9.2&quot;&#10;//    const val yCharts = &quot;2.0.0&quot;&#10;    const val yCharts = &quot;2.1.0&quot;&#10;}" />
              <option name="updatedContent" value="object Version {&#10;&#10;    const val coreKtx = &quot;1.12.0&quot;&#10;    const val lifecycleRuntimeKtx = &quot;2.8.7&quot;&#10;    const val activityCompose = &quot;1.10.1&quot;&#10;    const val composeBom = &quot;2024.04.01&quot;&#10;    const val junit = &quot;4.13.2&quot;&#10;    const val junitVersion = &quot;1.2.1&quot;&#10;    const val espressoCore = &quot;3.6.1&quot;&#10;    const val hilt = &quot;2.51.1&quot;&#10;    const val hiltNavigationCompose = &quot;1.2.0&quot;&#10;    const val serializationJson = &quot;1.6.3&quot;&#10;    const val navigationCompose = &quot;2.9.2&quot;&#10;//    const val yCharts = &quot;2.0.0&quot;&#10;    const val yCharts = &quot;2.1.0&quot;&#10;    const val vico = &quot;1.13.0&quot;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>