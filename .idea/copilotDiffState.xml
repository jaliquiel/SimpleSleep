<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/sleepeasy/ui/screens/SleepFormScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/sleepeasy/ui/screens/SleepFormScreen.kt" />
              <option name="originalContent" value="package com.example.sleepeasy.ui.screens&#10;&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.systemBarsPadding&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TimePicker&#10;import androidx.compose.material3.TimePickerLayoutType&#10;import androidx.compose.material3.rememberTimePickerState&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import com.example.sleepeasy.ui.viewmodel.SleepFormViewModel&#10;import java.util.Calendar&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun SleepFormScreen(&#10;    sleepHubViewModel: SleepFormViewModel = hiltViewModel(),&#10;    // TODO: handle callbacks and navigation&#10;) {&#10;    Scaffold(&#10;        modifier = Modifier&#10;            .systemBarsPadding()&#10;            .fillMaxSize(),&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Record Sleeping Time&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = { /* Back pressed */ }) {&#10;                        Icon(Icons.Filled.ArrowBack, contentDescription = &quot;Back&quot;)&#10;                    }&#10;                }&#10;            )&#10;        },&#10;        bottomBar = {&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp)&#10;            ) {&#10;                Button(onClick = {&#10;                    // TODO: Handle click submission&#10;                }, modifier = Modifier.weight(1f)) {&#10;                    Text(&quot;Submit&quot;)&#10;                }&#10;                Button(onClick = {&#10;                    //TODO: handle click&#10;                }, modifier = Modifier.weight(1f).padding(start = 8.dp)) {&#10;                    Text(&quot;Cancel&quot;)&#10;                }&#10;            }&#10;        },&#10;        content = { innerPadding -&gt;&#10;            val currentTime = Calendar.getInstance()&#10;            val sleepTimePickerState = rememberTimePickerState(&#10;                initialHour = currentTime.get(Calendar.HOUR_OF_DAY),&#10;                initialMinute = currentTime.get(Calendar.MINUTE),&#10;                is24Hour = false,&#10;            )&#10;            val wakeUpTimePickerState = rememberTimePickerState(&#10;                initialHour = currentTime.get(Calendar.HOUR_OF_DAY),&#10;                initialMinute = currentTime.get(Calendar.MINUTE),&#10;                is24Hour = false,&#10;            )&#10;            Column(&#10;                modifier = Modifier&#10;                    .padding(innerPadding)&#10;                    .verticalScroll(rememberScrollState())&#10;            ) {&#10;&#10;                Text(&quot;Input Sleep time:&quot;)&#10;                TimePicker(&#10;                    state = sleepTimePickerState,&#10;                    layoutType = TimePickerLayoutType.Vertical,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;                Text(&quot;Input Wake up time:&quot;)&#10;                TimePicker(&#10;                    state = wakeUpTimePickerState,&#10;                    layoutType = TimePickerLayoutType.Vertical,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;            }&#10;        }&#10;    )&#10;}&#10;&#10;@Preview&#10;@Composable&#10;fun SleepFormScreenPreview() {&#10;    SleepFormScreen()&#10;}" />
              <option name="updatedContent" value="package com.example.sleepeasy.ui.screens&#10;&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.systemBarsPadding&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TimePicker&#10;import androidx.compose.material3.TimePickerLayoutType&#10;import androidx.compose.material3.rememberTimePickerState&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import com.example.sleepeasy.ui.viewmodel.SleepFormViewModel&#10;import java.util.Calendar&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun SleepFormScreen(&#10;    sleepHubViewModel: SleepFormViewModel = hiltViewModel(),&#10;    // TODO: handle callbacks and navigation&#10;) {&#10;    Scaffold(&#10;        modifier = Modifier&#10;            .systemBarsPadding()&#10;            .fillMaxSize(),&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Record Sleeping Time&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = { /* Back pressed */ }) {&#10;                        Icon(Icons.Filled.ArrowBack, contentDescription = &quot;Back&quot;)&#10;                    }&#10;                }&#10;            )&#10;        },&#10;        bottomBar = {&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp)&#10;            ) {&#10;                Button(onClick = {&#10;                    // TODO: Handle click submission&#10;                }, modifier = Modifier.weight(1f)) {&#10;                    Text(&quot;Submit&quot;)&#10;                }&#10;                Button(onClick = {&#10;                    //TODO: handle click&#10;                }, modifier = Modifier.weight(1f).padding(start = 8.dp)) {&#10;                    Text(&quot;Cancel&quot;)&#10;                }&#10;            }&#10;        },&#10;        content = { innerPadding -&gt;&#10;            val currentTime = Calendar.getInstance()&#10;            val sleepTimePickerState = rememberTimePickerState(&#10;                initialHour = currentTime.get(Calendar.HOUR_OF_DAY),&#10;                initialMinute = currentTime.get(Calendar.MINUTE),&#10;                is24Hour = false,&#10;            )&#10;            val wakeUpTimePickerState = rememberTimePickerState(&#10;                initialHour = currentTime.get(Calendar.HOUR_OF_DAY),&#10;                initialMinute = currentTime.get(Calendar.MINUTE),&#10;                is24Hour = false,&#10;            )&#10;            Column(&#10;                modifier = Modifier&#10;                    .padding(horizontal = 16.dp, vertical = 8.dp)&#10;                    .padding(innerPadding)&#10;                    .verticalScroll(rememberScrollState()),&#10;            ) {&#10;                Text(&quot;Input Sleep time:&quot;, modifier = Modifier.padding(vertical = 8.dp))&#10;                TimePicker(&#10;                    state = sleepTimePickerState,&#10;                    layoutType = TimePickerLayoutType.Vertical,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;                Text(&quot;Input Wake up time:&quot;, modifier = Modifier.padding(vertical = 8.dp))&#10;                TimePicker(&#10;                    state = wakeUpTimePickerState,&#10;                    layoutType = TimePickerLayoutType.Vertical,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;            }&#10;        }&#10;    )&#10;}&#10;&#10;@Preview&#10;@Composable&#10;fun SleepFormScreenPreview() {&#10;    SleepFormScreen()&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>